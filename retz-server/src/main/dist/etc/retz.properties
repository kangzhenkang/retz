## Mesos host name and port, or ZooKeeper location
## ZooKeeper location e.g. zk://zk1:2181,zk2:2181,zk3:2181/mesos
## is strongly recommended for production usage
retz.mesos = localhost:5050
## Misc to register as a framework
## retz.mesos.role = retz
## retz.mesos.principal = retz
## retz.mesos.secret.file =
## (Sort of) interval of resource offers from Mesos in seconds
## retz.mesos.refuse = 3

## A Unix user to run in sandbox
## retz.user = nobody

## A URL and port number to listen
retz.bind  = http://localhost:9090
## Authentication
retz.authentication = true
## Define admin key and secret
retz.access.key = deadbeef
retz.access.secret = cafebabe

## System Limits

## Limit of simultaneous job execution
## retz.max.running = 128
## retz.max.stock = 16
## Max size of a job (memory and disk are in MBs)
## retz.max.cpus = 8
## retz.max.mem = 31744
## Sets GPU_RESOURCES aas GPU-enabled framework when max.gpus > 0
## retz.max.gpus = 0
## retz.max.ports = 10
## retz.max.disk = 1024

## Persistence: JDBC access URL
## H2 Database Example:
## retz.database.url = jdbc:h2:mem:retz-server;DB_CLOSE_DELAY=-1
## retz.database.driver = org.h2.Driver
## retz.database.user =
## retz.database.pass =
##
## Postgres Example: if there're no tables, Retz automatically creates then at startup
## retz.database.url = jdbc:postgresql://127.0.0.1:5432/retz
## retz.database.driver = org.postgresql.Driver
## retz.database.user = retz
## retz.database.pass = ba11ca3e

## If BIND_ADDRESS is for SSL, these will be used for both server and client
## retz.tls.keystore.file =
## retz.tls.keystore.pass =
## retz.tls.truststore.file =
## retz.tls.truststore.pass =
## retz.tls.insecure = false

## Choose Planner from one of {naive, priority}
retz.planner.name = naive

## Strategy to pick jobs from the job queue
## retz.job-queue-strategy = fit

## JMX Port, shared by retz-server and retz-admin
## retz.jmx.port = 9999

## Finished/Killed job collection parameters
## retz.gc = true
## retz.gc.leeway = 604800
## retz.gc.interval = 600
